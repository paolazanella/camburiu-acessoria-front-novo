// src/services/userService.js - VERS√ÉO COM DEBUG EXTRA
import api from './api'

export default {
    // üë§ OBTER PERFIL DO USU√ÅRIO LOGADO - COM DEBUG DETALHADO
    async obterPerfilLogado() {
        try {
            console.log('üîç [userService] Iniciando obterPerfilLogado()')
            
            // Verificar se h√° token
            const token = localStorage.getItem('token')
            console.log('üîç [userService] Token check:', token ? 'Existe' : 'N√£o existe')
            
            if (!token) {
                throw new Error('Token n√£o encontrado. Fa√ßa login novamente.')
            }
            
            console.log('üì§ [userService] Fazendo requisi√ß√£o para /usuarios/me...')
            
            // Fazer a requisi√ß√£o
            const response = await api.get('/usuarios/me')
            
            console.log('üì• [userService] Resposta recebida:', {
                status: response.status,
                statusText: response.statusText,
                data: response.data,
                dataType: typeof response.data,
                dataString: JSON.stringify(response.data)
            })
            
            // Verificar se response.data existe e √© v√°lido
            if (!response.data) {
                console.error('‚ùå [userService] response.data est√° vazio ou undefined')
                throw new Error('Resposta vazia do servidor')
            }
            
            if (typeof response.data !== 'object') {
                console.error('‚ùå [userService] response.data n√£o √© um objeto:', typeof response.data)
                throw new Error('Resposta inv√°lida do servidor')
            }
            
            console.log('‚úÖ [userService] Dados v√°lidos recebidos:', response.data)
            
            // Atualizar localStorage com dados atualizados
            try {
                const userAtualizado = {
                    ...JSON.parse(localStorage.getItem('user') || '{}'),
                    ...response.data
                }
                localStorage.setItem('user', JSON.stringify(userAtualizado))
                console.log('‚úÖ [userService] localStorage atualizado')
            } catch (localStorageError) {
                console.warn('‚ö†Ô∏è [userService] Erro ao atualizar localStorage:', localStorageError)
                // N√£o falhar por causa disso
            }
            
            return response.data
        } catch (error) {
            console.error('‚ùå [userService] Erro detalhado:', {
                message: error.message,
                name: error.name,
                stack: error.stack,
                response: error.response,
                request: error.request,
                config: error.config
            })
            
            // Se for erro de rede
            if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {
                console.error('üåê [userService] Erro de rede - servidor pode estar offline')
                throw new Error('Erro de conex√£o. Verifique se o servidor est√° rodando.')
            }
            
            // Se for erro de token
            if (error.response?.status === 401) {
                console.log('üö® [userService] Token expirado ou inv√°lido - fazendo logout')
                localStorage.removeItem('token')
                localStorage.removeItem('user')
                
                if (window.location.pathname !== '/') {
                    window.location.href = '/'
                }
                throw new Error('Sess√£o expirada. Redirecionando para login...')
            }
            
            // Se for erro de parsing JSON
            if (error.message.includes('JSON') || error.message.includes('undefined')) {
                console.error('üö® [userService] Erro de JSON parsing - resposta inv√°lida do servidor')
                throw new Error('Resposta inv√°lida do servidor. Verifique se a API est√° funcionando.')
            }
            
            // Erro gen√©rico
            throw new Error(error.message || 'Erro desconhecido ao carregar perfil')
        }
    },

    // Outros m√©todos permanecem os mesmos...
    formatarStatus(status) {
        switch (Number(status)) {
            case 1: return 'Administrador'
            case 2: return 'Usu√°rio'
            default: return 'Desconhecido'
        }
    },

    getCorStatus(status) {
        switch (Number(status)) {
            case 1: return '#dc3545'
            case 2: return '#28a745'
            default: return '#6c757d'
        }
    }
}